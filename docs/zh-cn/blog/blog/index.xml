<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cluster Optimizer – 博客</title>
    <link>/zh-cn/blog/blog/</link>
    <description>Recent content in 博客 on Cluster Optimizer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Sep 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh-cn/blog/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: 评估集群休眠节省成本</title>
      <link>/zh-cn/blog/2024/09/11/%E8%AF%84%E4%BC%B0%E9%9B%86%E7%BE%A4%E4%BC%91%E7%9C%A0%E8%8A%82%E7%9C%81%E6%88%90%E6%9C%AC/</link>
      <pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>/zh-cn/blog/2024/09/11/%E8%AF%84%E4%BC%B0%E9%9B%86%E7%BE%A4%E4%BC%91%E7%9C%A0%E8%8A%82%E7%9C%81%E6%88%90%E6%9C%AC/</guid>
      <description>
        
        
        &lt;h2 id=&#34;集群休眠概述&#34;&gt;集群休眠概述&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e9%9b%86%e7%be%a4%e4%bc%91%e7%9c%a0%e6%a6%82%e8%bf%b0&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;资源闲置和利用率低是用户使用云原生集群时的痛点之一。例如，开发、测试和演示环境等线下运行的集群通常在工作时间之外的利用率很低，但企业仍需为这些资源支付费用。&lt;/p&gt;
&lt;p&gt;集群休眠能够自动或手动控制集群的休眠和恢复，释放和恢复集群中的节点来降低集群的资源占用，提高资源利用率，节约成本。例如， 通过合理配置集群休眠策略，在非工作时间段（如夜间或周末）自动关闭集群，企业可以显著减少不必要的资源消耗，实现显著的成本节约。因此，集群休眠是一种有效的成本管理策略，特别适用于线下非生产环境。&lt;/p&gt;
&lt;h2 id=&#34;集群休眠策略&#34;&gt;集群休眠策略&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e9%9b%86%e7%be%a4%e4%bc%91%e7%9c%a0%e7%ad%96%e7%95%a5&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;集群休眠在休眠期间逐步释放集群中的节点，存储集群中负载（例如Deployment、Job等）的状态。在恢复期间，恢复集群节点和集群中负载（例如Deployment、Job等）的状态。集群一般通过节点组（也叫节点池）来管理，节点组中会配置不同的节点类型，比如预留节点（例如包年包月）和按需节点（例如按量付费，抢占式实例）。根据节点组是否能够自动扩缩容，可将其分为非自动扩缩容节点组和自动扩缩容节点组，并采用不同的集群休眠策略。&lt;/p&gt;
&lt;p&gt;非自动扩缩容节点组中节点数量是固定配置，无法根据负载动态调整资源，需手动管理节点数量。针对此类节点组，休眠期间会将其节点数量调整为0，促使云服务商逐步释放该节点组的节点。恢复期间调整为原节点数量。值得注意的是，将节点数设置为0并不意味着节点组内所有节点都会被释放掉。一般情况下，节点组内的预留节点仍将保留。&lt;/p&gt;
&lt;p&gt;自动扩缩容节点组是一种根据实际负载动态调整节点数量的机制，以优化资源利用。针对此类节点组，集群休眠将可调整的工作负载都进行调整，并依赖于该节点组的扩缩容策略进行缩容。例如，将Deployment的副本数调整为0，将CronJob暂停等，从而触发该节点组的缩容，减少节点数量。&lt;/p&gt;
&lt;h2 id=&#34;集群休眠收益评估&#34;&gt;集群休眠收益评估&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e9%9b%86%e7%be%a4%e4%bc%91%e7%9c%a0%e6%94%b6%e7%9b%8a%e8%af%84%e4%bc%b0&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;集群休眠收益评估工具&#34;&gt;集群休眠收益评估工具&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e9%9b%86%e7%be%a4%e4%bc%91%e7%9c%a0%e6%94%b6%e7%9b%8a%e8%af%84%e4%bc%b0%e5%b7%a5%e5%85%b7&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;我们提供了工具&lt;code&gt;cluster-hibernate-saving-estimate&lt;/code&gt;帮助用户评估集群中可节约的资源。该工具能够扫描集群中每个节点组的详情，给出节点组概况、最大潜在节省、潜在节省、推荐操作和节点组Deployment资源请求总和。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最大潜在节省（Max Potential Saving）：指在调整节点组中各类型节点达到理想分布情况下所能够节省的最大空间。&lt;/li&gt;
&lt;li&gt;潜在节省（Potential Saving）：指在当前节点组现状下所能够节省的空间。&lt;/li&gt;
&lt;li&gt;节点组Deployment资源请求总和（Sum of Deployment Resource Requests）：指该节点组中实际部署的Deployment的Pod的资源Request的总和，该值主要是用于参考值，用于粗略评估该节点组中Deployment的资源请求占用情况。其占比越高，则对于自动扩缩容节点组能够达到的最大潜在节省最高。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：集群休眠收益评估工具可在&lt;code&gt;https://github.com/wiseinf/cluster-hibernate-saving-estimate/tags&lt;/code&gt; 下载， 目前仅支持阿里云、AWS等云平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们分析下两种常见场景下集群休眠的收益。&lt;/p&gt;
&lt;h4 id=&#34;场景1非自动伸缩节点组仅包含预留节点&#34;&gt;场景1：非自动伸缩节点组，仅包含预留节点&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%9c%ba%e6%99%af1%e9%9d%9e%e8%87%aa%e5%8a%a8%e4%bc%b8%e7%bc%a9%e8%8a%82%e7%82%b9%e7%bb%84%e4%bb%85%e5%8c%85%e5%90%ab%e9%a2%84%e7%95%99%e8%8a%82%e7%82%b9&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;非自动伸缩节点组中若仅包含预留节点，典型输出如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NodeGroup: cpu-ng(npa324882932487c9777eaa7f6854e4)  Total Nodes: 4  Autoscaling: false
  OnDemandNodes: 0  
  SpotNodes: 0  
  ReservedNodes: 4  cpu: 32 cores, memory: 128 gib
    Node: cn-beijing.171.19.105.70(i-bp19u4ufadv9niflo1o4) NoSpot, InstanceType: ecs.g7ne.2xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.19.105.74(i-bp19u4ufadv9niflo1o3) NoSpot, InstanceType: ecs.g7ne.2xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.19.105.71(i-bp19u4ufadv9niflo1o5) NoSpot, InstanceType: ecs.g7ne.2xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.19.105.251(i-bp161b0ldoqt1k771t5e) NoSpot, InstanceType: ecs.g7ne.2xlarge, ChargeType: PrePaid
  Max Potential Saving: CPU: 14125.71 core hours; Memory: 56502.86 gib hours
  Potential Saving: No saving, no spot or on demand nodes
  Recommendation: adjust some reserved nodes to on-demand or spot nodes based on its usage
  Sum of Deployment Resource Requests: CPU 8.63 cores, Memory 18.68 gibs
该节点组包含4个预留节点，总计包含32核CPU和128Gi内存。假设该节点组在周一至周五晚上9点开始休眠，周一至周五早上8点开始恢复（也就是结束休眠），每月按照30日计算。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该节电组最大潜在节省中CPU可节约核时是 14125.71核时，计算如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    14125.71核时 = 32（CPU核数）* 720（每月小时数） * 103(每周休眠小时数) / 168（每周小时数）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，32核是该节点组的总核数。最大潜在节省时将预留节点都调整为按需节点，此时可达到最大潜在节省。&lt;/p&gt;
&lt;p&gt;内存的可节约Gi时计算方式同CPU类似，不再赘述。&lt;/p&gt;
&lt;p&gt;该节点组潜在节省为0。在当前现状下，节点组都是预留节点，将节点组节点数量调整为0时不会释放任何节点，此时无法节省成本。若期望节省成本，需将部分节点调整为按需节点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：实际调整节点类型时需考虑预留节点和按需节点价格差异。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;场景2自动伸缩节点组-包含按需节点&#34;&gt;场景2：自动伸缩节点组， 包含按需节点&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%9c%ba%e6%99%af2%e8%87%aa%e5%8a%a8%e4%bc%b8%e7%bc%a9%e8%8a%82%e7%82%b9%e7%bb%84-%e5%8c%85%e5%90%ab%e6%8c%89%e9%9c%80%e8%8a%82%e7%82%b9&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NodeGroup: as-cpu-ng(np151adb107448039712d3a24f0d50a)  Total Nodes: 12  Autoscaling: true
  OnDemandNodes: 6  cpu: 192 cores, memory: 384 gib
    Node: cn-beijing.171.18.106.158(i-bp6f7txtyecxuauzgk6m) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.76(i-bp6f7txtyecxuauzgk6o) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.69(i-bp6f7txtyecxuauzgk6j) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.79(i-bp6f7txtyecxuauzgk6k) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.159(i-bp6f7txtyecxuauzgk6h) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.125(i-bp6f7txtyecxuauzgk6g) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
  SpotNodes: 0  
  ReservedNodes: 6    cpu: 192 cores, memory: 384 gib
    Node: cn-beijing.171.18.106.75(i-bp6f7txtyecxuauzgk6d) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.120(i-bp6f7txtyecxuauzgk6l) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.71(i-bp6f7txtyecxuauzgk6f) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.123(i-bp6f7txtyecxuauzgk6i) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.78(i-bp6f7txtyecxuauzgk6n) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid
    Node: cn-beijing.171.18.106.248(i-bp6f7txtyecxuauzgk6e) NoSpot, InstanceType: ecs.hfc7.8xlarge, ChargeType: PrePaid  
  Max Potential Saving: CPU: 98880 core hours; Memory: 197760 gib hours
  Potential Saving: CPU: 84754.29 core hours; Memory: 169508.57 gib hours
  Recommendation: no recommendation
  Sum of Deployment Resource Requests: CPU 224.00 cores, Memory 448.00 gibs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该节点组最大潜在节省中CPU可节约核时计算如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    98880核时 = 224（CPU核数）* 720（每月小时数）* 103(每周休眠小时数) / 168（每周小时数）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，计算时采用的CPU核数是节点组Deployment资源请求总和（224核）。&lt;/p&gt;
&lt;p&gt;该节点组潜在节省中CPU可节约核时数计算如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    84754.29核时 = 192（CPU核数）* 720（每月小时数）* 103(每周休眠小时数) / 168（每周小时数）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，计算时采用的CPU核数是节点组Deployment资源请求总和中CPU核数和按需节点组核数总和的较小值（192核）。&lt;/p&gt;
&lt;p&gt;该节点组中潜在节省中CPU可节约核时数小于最大潜在节省中CPU最大可节约核时，此时可通过将部分预留节点调整为按需节点，达到最大潜在节省中CPU最大可节约核时。&lt;/p&gt;
&lt;h2 id=&#34;问题解决方案&#34;&gt;问题&amp;amp;解决方案&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e9%97%ae%e9%a2%98%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;工作负载状态的保存和恢复&#34;&gt;工作负载状态的保存和恢复&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%b7%a5%e4%bd%9c%e8%b4%9f%e8%bd%bd%e7%8a%b6%e6%80%81%e7%9a%84%e4%bf%9d%e5%ad%98%e5%92%8c%e6%81%a2%e5%a4%8d&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;集群休眠涉及到工作负载状态的保存和恢复，用户主要顾虑是集群恢复时无法完全恢复工作负载的状态，导致工作负载不可用，需要进行排障，从而影响工作效率。集群休眠主要通过调整节点组（释放和恢复节点）来进行，若集群休眠和恢复导致工作负载不可用，则同样的问题也会出现在线上。在云原生的场景中，应用必须具备弹性能力，最好的解决方式是排查工作负载不可用的原因并彻底解决，使得该应用能够忍受节点故障，同时也消除该应用线上由于节点故障等导致的不可用风险。&lt;/p&gt;
&lt;h3 id=&#34;期望工作负载在集群休眠时保持运行状态&#34;&gt;期望工作负载在集群休眠时保持运行状态&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e6%9c%9f%e6%9c%9b%e5%b7%a5%e4%bd%9c%e8%b4%9f%e8%bd%bd%e5%9c%a8%e9%9b%86%e7%be%a4%e4%bc%91%e7%9c%a0%e6%97%b6%e4%bf%9d%e6%8c%81%e8%bf%90%e8%a1%8c%e7%8a%b6%e6%80%81&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;若期望工作负载在集群休眠期间仍保持运行状态，需保证工作负载具备如下特性：&lt;/p&gt;
&lt;p&gt;该负载可调度到自动扩缩容节点组上运行（集群中至少包含一个自动扩缩容节点组）
包含标签&lt;code&gt;wiseinf.com/reserved&lt;/code&gt;，其值是&lt;code&gt;true&lt;/code&gt;。集群休眠调整工作负载状态时会忽略包含该标签的工作负载。目前仅支持三种类型：&lt;code&gt;Deployment&lt;/code&gt;、&lt;code&gt;DaemonSet&lt;/code&gt;和&lt;code&gt;CronJob&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e6%80%bb%e7%bb%93&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;集群休眠是一个行之有效的成本管理策略，特别适用于线下非生产环境。集群休眠收益评估工具能够快速评估集群使用集群休眠策略时每个节点池可节约的空间，同时也给出了两个典型场景（包括自动扩缩容节点组和非自动扩缩容节点组）下的评估案例，帮助用户更好的进行评估收益，从而可通过调整设置，降低资源成本。&lt;/p&gt;
&lt;h2 id=&#34;关于集群优化平台&#34;&gt;关于集群优化平台&lt;a class=&#34;td-heading-self-link&#34; href=&#34;#%e5%85%b3%e4%ba%8e%e9%9b%86%e7%be%a4%e4%bc%98%e5%8c%96%e5%b9%b3%e5%8f%b0&#34; aria-label=&#34;Heading self-link&#34;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;集群优化平台&lt;strong&gt;Cluster Optimizer&lt;/strong&gt;是云智优本公司研发的一站式云原生优化平台，致力于帮助客户降低云原生集群和应用的成本，提升运营效率。它是一个基于数据驱动的智能决策平台，是基于云资源、应用以及用户、云厂商行为数据，利用深度学习、序列决策等算法，结合云、微服务、云原生等实践经验，构建的一套技术解决方案。此平台能够全面深入分析云资源、应用、用户行为及服务商数据及使用情况，预测未来资源需求，精准识别成本优化的机会，并提供个性化的优化建议。此外，平台采用全链路闭环的自动化优化机制，提高了优化效率，减少了人为错误，使客户能够轻松实现云原生集群及应用资源的自动化管理和优化，提升资源利用效率，显著降低云成本，提高运营效率。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
